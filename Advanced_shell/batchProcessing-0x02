#!/bin/bash

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE="https://pokeapi.co/api/v2/pokemon"
DELAY_SECONDS=1
MAX_RETRIES=3
OUTPUT_DIR="pokemon_data"
ERROR_LOG="pokemon_errors.log"

# Create output directory and initialize error log
mkdir -p "$OUTPUT_DIR"
> "$ERROR_LOG"

# Function to make API request with retries
fetch_pokemon_data() {
    local pokemon=$1
    local retry_count=0
    local success=false
    
    while [ $retry_count -lt $MAX_RETRIES ] && [ "$success" = false ]; do
        echo "Attempt $((retry_count + 1))/$MAX_RETRIES for $pokemon..."
        
        # Make the API request with timeout
        if curl -s -f --max-time 30 "${API_BASE}/${pokemon}" -o "${OUTPUT_DIR}/${pokemon}.json" 2>> "$ERROR_LOG"; then
            success=true
            echo "Saved data to ${OUTPUT_DIR}/${pokemon}.json ✅"
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $MAX_RETRIES ]; then
                echo "Request failed, retrying in $DELAY_SECONDS seconds..."
                sleep "$DELAY_SECONDS"
            fi
        fi
    done
    
    if [ "$success" = false ]; then
        echo "Failed to fetch $pokemon after $MAX_RETRIES attempts" >> "$ERROR_LOG"
        echo "❌ Failed to fetch $pokemon (see $ERROR_LOG)"
        # Remove any partial file
        rm -f "${OUTPUT_DIR}/${pokemon}.json"
    fi
}

# Main execution
echo "Starting Pokémon data fetch at $(date)"
echo "======================================"

for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_data "$pokemon"
    sleep "$DELAY_SECONDS"  # Rate limiting between different Pokémon
done

echo "======================================"
echo "Completed at $(date)"
success_count=$(ls -1 "$OUTPUT_DIR" 2>/dev/null | wc -l)
echo "Successfully fetched: $success_count/${#POKEMON_LIST[@]} Pokémon"
[ -s "$ERROR_LOG" ] && echo "Errors logged in: $ERROR_LOG"
echo "All operations completed!"